{
  "vendors": [
    {
      "name": "LeetCode",
      "url": "https://leetcode.com",
      "id": "0e54c1d1-4d05-434b-9fe7-b86ed3300193"
    }
  ],
  "problems": [
    {
      "title": "3Sum",
      "link": "https://leetcode.com/problems/3sum/",
      "vendor": "LeetCode",
      "description": "Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n\nNote:\n\nThe solution set must not contain duplicate triplets.\n\nExample:\n\nGiven array nums = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]",
      "level": "easy",
      "solutions": [
        {
          "title": "Java Simple Two pointer",
          "dataStructures": [
            "array"
          ],
          "algorithms": [
            "Two Pointer"
          ],
          "timeComplexity": "O(N)",
          "spaceComplexity": "O(1)",
          "level": [
            "medium"
          ],
          "sourceCodes": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        Arrays.sort(nums);\n        List<List<Integer>> result=new ArrayList<>();\n        for(int i=0;i<nums.length-2;i++)\n        {\n            if(i>=1)\n            {\n                if(nums[i-1]==nums[i])\n                    continue;\n            }\n            List<List<Integer>> temp=twosum(i+1,nums.length-1,nums,-nums[i]);\n            if(temp.size()!=0)\n            {\n            for(List<Integer> t:temp)\n            {\n                List<Integer> t1=new ArrayList<>();\n                t1.add(nums[i]);\n                for(int data:t)\n                    t1.add(data);\n                result.add(t1);\n            }\n            }\n        }\n        return result;\n    \n        \n    }\n    List<List<Integer>> twosum(int i,int j,int nums[],int required)\n    {\n        List<List<Integer>> result=new ArrayList();\n        while(i<j)\n        {\n            if(nums[i]+nums[j]>required)\n            j--;\n            else if(nums[i]+nums[j]==required)\n            {\n            List<Integer> temp=new ArrayList();\n            temp.add(nums[i]);\n            temp.add(nums[j]);\n            result.add(temp);\n            while(i<j&&nums[i]==nums[i+1])\n                i++;\n                while(i<j&&nums[j]==nums[j-1])\n                    j--;\n                i++;\n                j--;\n            }\n            else\n                i++;\n            \n        }\n        return result;\n    }\n}"
        }
      ],
      "id": "7f124c78-c769-4b34-99c1-fcb1a7752639"
    }
  ],
  "algorithms": [
    {
      "name": "BFS",
      "id": "44a02640-9ed2-4069-8ee3-b1077f44f4d4"
    },
    {
      "name": "DFS",
      "id": "f454a566-ff75-4989-b2b4-86518c08d4f6"
    },
    {
      "name": "Dynamic Programming",
      "id": "410c5147-eb28-4a7f-8119-c75cd769cf13"
    },
    {
      "name": "Recursion",
      "id": "9c1a0282-2651-46a8-8816-0c4bf826ec61"
    },
    {
      "name": "Test with tags",
      "tags": [
        "Dynamic Programming",
        "Greedy",
        "Search"
      ],
      "id": "ce25639d-a446-4660-bcf3-d5463c1cc40b"
    }
  ],
  "dataStructures": [
    {
      "name": "Array",
      "short": "array",
      "id": "b348b504-ce34-4df9-aee5-fcc7c7ce6651"
    },
    {
      "name": "Linked List",
      "short": "linked-list",
      "id": "634c2ec7-c26b-47df-95fd-d02057fd136a"
    },
    {
      "name": "Doubly Linked List",
      "short": "doubly-linked-list",
      "parent": "634c2ec7-c26b-47df-95fd-d02057fd136a",
      "id": "7871d080-a77d-4976-b42c-e7dfe181f73c"
    }
  ]
}